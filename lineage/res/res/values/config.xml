<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2015 The CyanogenMod Project
                   2017-2018 The LineageOS Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<resources>
    <!-- Whether to enable app suggest overlay which allows app suggest
         provider to be replaced by an app at run-time. When disabled, only
         the config_appSuggestProviderPackageName will be searched for app
         suggest provider, otherwise packages whos signature matches the
         signature of config_appSuggestProviderPackageNames will be searched,
         and the service with the highest version number will be picked.
         Anyone who wants to disable the overlay mechanism can set it to false.

         Note: There appears to be an issue with false if we reinstall the provider which causes
         it to not get the update and fail to reconnect on package update.  It's safer to just
         use the list version with config_appSuggestProviderPackageNames.
         -->
    <bool name="config_enableAppSuggestOverlay" translatable="false">true</bool>

    <!-- Package name providing app suggest support. Used only when
         config_enableAppSuggestOverlay is false. -->
    <string name="config_appSuggestProviderPackageName" translatable="false">com.cyanogen.app.suggest</string>

    <!-- List of packages providing app suggest support. Used only when
    config_enableAppSuggestOverlay is true. -->
    <string-array name="config_appSuggestProviderPackageNames" translatable="false">
        <item>com.cyanogen.app.suggest</item>
    </string-array>

    <!-- Automatic power profile management per app.
         Each item should list the fully-qualified activity
         name and the power profile id, separated by a comma. -->
    <string-array name="config_auto_perf_activities" translatable="false">
    </string-array>

    <!-- Default value for proximity check on screen wake
     NOTE ! - Enable for devices that have a fast response proximity sensor (ideally < 300ms)-->
    <bool name="config_proximityCheckOnWake">false</bool>
    <integer name="config_proximityCheckTimeout">250</integer>
    <bool name="config_proximityCheckOnWakeEnabledByDefault">false</bool>

    <!-- BurnIn protection. This should be enabled on devices that have OLED displays -->
    <bool name="config_enableBurnInProtection">false</bool>

    <!-- Default values for LiveDisplay -->
    <integer name="config_dayColorTemperature">6500</integer>
    <integer name="config_nightColorTemperature">4800</integer>
    <integer name="config_outdoorAmbientLux">12000</integer>
    <integer name="config_outdoorAmbientLuxHysteresis">1500</integer>
    <integer name="config_defaultLiveDisplayMode">2</integer>

    <!-- These values should map to the true min and max
         that the backend is capable of adjusting to. This
         is more important when using the ColorBalance mode,
         as the discrete adjustment is interpolated between
         this range (with config_dayColorTemperature at zero) -->
    <integer name="config_minColorTemperature">1000</integer>
    <integer name="config_maxColorTemperature">10000</integer>

    <bool name="config_defaultAutoContrast">false</bool>
    <bool name="config_defaultAutoOutdoorMode">true</bool>
    <bool name="config_defaultColorEnhancement">true</bool>
    <bool name="config_defaultCABC">true</bool>

    <!-- Display mode remapping table.
         If the mode names returned by the backend do not match
         the predefined and translated strings in the Settings
         app, they can be remapped here. The format is
         "oldname:newname", one per entry. -->
    <string-array name="config_displayModeMappings" translatable="false">
    </string-array>

    <!-- Should we filter any display modes which are unampped? -->
    <bool name="config_filterDisplayModes">false</bool>

    <!-- All the capabilities of the LEDs on this device, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following capabilities present:

         LIGHTS_RGB_NOTIFICATION_LED = 1
         LIGHTS_RGB_BATTERY_LED = 2
         LIGHTS_MULTIPLE_NOTIFICATION_LED = 4 (deprecated)
         LIGHTS_PULSATING_LED = 8
         LIGHTS_SEGMENTED_BATTERY_LED = 16
         LIGHTS_ADJUSTABLE_NOTIFICATION_LED_BRIGHTNESS = 32
         LIGHTS_BATTERY_LED = 64

         For example, a device with notification and battery lights that supports
         pulsating and RGB control would set this config to 75. -->
    <integer name="config_deviceLightCapabilities">8</integer>

    <!-- Default, comma-delimited, quick settings tiles. See QSConstants.java for a list of all available tiles -->
    <string name="config_defaultQuickSettingsTiles">wifi,bt,dnd,cell,airplane,rotation,location,edit,flashlight,cast,hotspot,inversion,live_display</string>

    <!-- Wifi Service -->
    <!-- Whether to make default hotspot security NONE-->
    <bool name="config_wifiHotspotSecurityNone">false</bool>
    <!-- Default wi-fi hotspot ssid -->
    <string name="config_wifiHotSpotSsid" translatable="false"></string>
    <!-- Default wi-fi hotspot pass -->
    <string name="config_wifiHotSpotPass" translatable="false"></string>
    <!-- Default wi-fi direct name -->
    <string name="config_wifiDirectName" translatable="false"></string>

    <!-- Defines external services to be started by the LineageSystemServer at boot. The service itself
         should publish as a binder services in its onStart -->
    <string-array name="config_externalLineageServices">
        <item>org.lineageos.platform.internal.LineageStatusBarManagerService</item>
        <item>org.lineageos.platform.internal.ProfileManagerService</item>
        <item>org.lineageos.platform.internal.LineageTelephonyManagerService</item>
        <item>org.lineageos.platform.internal.LineageHardwareService</item>
        <item>org.lineageos.platform.internal.PerformanceManagerService</item>
        <item>org.lineageos.platform.internal.LineageWeatherManagerService</item>
        <item>org.lineageos.platform.internal.display.LiveDisplayService</item>
        <item>org.lineageos.platform.internal.LineageAudioService</item>
    </string-array>

    <!-- The LineageSystemServer class that is invoked from Android's SystemServer -->
    <string name="config_externalSystemServer" translatable="false">org.lineageos.platform.internal.LineageSystemServer</string>

    <!-- Paths to the libraries that contain device specific key handlers -->
    <string-array name="config_deviceKeyHandlerLibs" translatable="false">
        <item>/system/priv-app/LineageParts/LineageParts.apk</item>
    </string-array>

    <!-- Names of the key handler classes -->
    <string-array name="config_deviceKeyHandlerClasses" translatable="false">
        <item>org.lineageos.lineageparts.gestures.KeyHandler</item>
    </string-array>

    <!-- Hardware keys present on the device, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following keys present:
             1 - Home
             2 - Back
             4 - Menu
             8 - Assistant (search)
            16 - App switch
            32 - Camera
            64 - Volume rocker
         For example, a device with Home, Back and Menu keys would set this
         config to 7. -->
    <integer name="config_deviceHardwareKeys">79</integer>

    <!-- Hardware keys present on the device with the ability to wake, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following keys present:
             1 - Home
             2 - Back
             4 - Menu
             8 - Assistant (search)
            16 - App switch
            32 - Camera
            64 - Volume rocker
         For example, a device with Home, Back and Menu keys would set this
         config to 7. -->
    <integer name="config_deviceHardwareWakeKeys">79</integer>

    <!-- Control the behavior when the user long presses the home button.
            0 - Nothing
            1 - Menu key
            2 - Recent apps view in SystemUI
            3 - Launch assist intent
            4 - Voice Search
            5 - In-app Search
            6 - Launch camera
            7 - Sleep
            8 - Last app
            9 - Toggle split screen
         This needs to match the enums in
         sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
    -->
    <integer name="config_longPressOnHomeBehavior">3</integer>

    <!-- Control the behavior when the user double-taps the home button.
            0 - Nothing
            1 - Menu key
            2 - Recent apps view in SystemUI
            3 - Launch assist intent
            4 - Voice Search
            5 - In-app Search
            6 - Launch camera
            7 - Sleep
            8 - Last app
            9 - Toggle split screen
         This needs to match the enums in
         sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
    -->
    <integer name="config_doubleTapOnHomeBehavior">0</integer>

    <!-- Control the behavior when the user long presses the menu button.
            0 - Nothing
            1 - Menu key
            2 - Recent apps view in SystemUI
            3 - Launch assist intent
            4 - Voice Search
            5 - In-app Search
            6 - Launch camera
            7 - Sleep
            8 - Last app
            9 - Toggle split screen
         This needs to match the enums in
         sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
    -->
    <integer name="config_longPressOnMenuBehavior">2</integer>

    <!-- Control the behavior when the user long presses the app switch button.
            0 - Nothing
            1 - Menu key
            2 - Recent apps view in SystemUI
            3 - Launch assist intent
            4 - Voice Search
            5 - In-app Search
            6 - Launch camera
            7 - Sleep
            8 - Last app
            9 - Toggle split screen
         This needs to match the enums in
         sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
    -->
    <integer name="config_longPressOnAppSwitchBehavior">9</integer>

    <!-- Indicates that the device has Single-stage Camera key
         (without "Focus" state) instead of Dual-stage. -->
    <bool name="config_singleStageCameraKey">false</bool>
</resources>
